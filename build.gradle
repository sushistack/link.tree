plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagerVersion}"
    id 'org.jetbrains.kotlin.plugin.jpa' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.kapt' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.allopen' version "${kotlinVersion}"
}

group = 'com.sushistack'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencyManagement {
    imports {
        mavenBom('org.springframework.cloud:spring-cloud-dependencies:2023.0.3')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.retry:spring-retry'
    implementation "org.springframework.integration:spring-integration-core:${springIntegrationVersion}"
    implementation "org.springframework.integration:spring-integration-ftp:${springIntegrationVersion}"
    implementation 'commons-net:commons-net:3.11.1'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'
    implementation 'io.github.oshai:kotlin-logging:7.0.0'
    implementation 'com.microsoft.playwright:playwright:1.47.0'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation 'org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:${kotlinSerializationVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${kotlinSerializationVersion}"
    implementation 'de.brudaswen.kotlinx.serialization:kotlinx-serialization-csv:2.0.0'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${coroutinesVersion}"
    implementation "com.slack.api:slack-api-client:${slackVersion}"
    implementation "com.slack.api:slack-api-model:${slackVersion}"
    implementation "com.cohere:cohere-java:${cohereVersion}"
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'io.mockk:mockk:1.13.13'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'

    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    kapt("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

    allOpen {
        annotation("jakarta.persistence.Entity")
        annotation("jakarta.persistence.MappedSuperclass")
        annotation("jakarta.persistence.Embeddable")
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('processTestResources') {
    filesMatching('application.yml') {
        expand("jasyptPassword": project.findProperty("jasypt.encryptor.password"))
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
